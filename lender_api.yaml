openapi: 3.0.3
info:
  title: Lender API
  version: 1.0.0
  description: CRUD, bulk create, CSV download
paths:
  /lenders/:
    get:
      operationId: lenders_list
      parameters:
      - name: filter[search]
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: page[number]
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page[size]
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: sort
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - lenders
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PaginatedLenderList'
          description: ''
    post:
      operationId: lenders_create
      tags:
      - lenders
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Lender'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Lender'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Lender'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Lender'
          description: ''
  /lenders/{id}/:
    get:
      operationId: lenders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lender.
        required: true
      tags:
      - lenders
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Lender'
          description: ''
    put:
      operationId: lenders_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lender.
        required: true
      tags:
      - lenders
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Lender'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Lender'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Lender'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Lender'
          description: ''
    patch:
      operationId: lenders_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lender.
        required: true
      tags:
      - lenders
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/PatchedLender'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLender'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLender'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Lender'
          description: ''
    delete:
      operationId: lenders_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lender.
        required: true
      tags:
      - lenders
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /lenders/bulk_create/:
    post:
      operationId: lenders_bulk_create_create
      tags:
      - lenders
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object,
              properties:
                file:
                  type: string
                  format: binary
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Lender'
          description: ''
  /lenders/download_csv/:
    get:
      operationId: lenders_download_csv_retrieve
      tags:
      - lenders
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            text/csv:
          description: 'Download CSV file of all Lenders'
components:
  schemas:
    Lender:
      type: object
      description: |-
        A `ModelSerializer` is just a regular `Serializer`, except that:

        * A set of default fields are automatically populated.
        * A set of default validators are automatically populated.
        * Default `.create()` and `.update()` implementations are provided.

        The process of automatically determining a set of serializer fields
        based on the model fields is reasonably complex, but you almost certainly
        don't need to dig into the implementation.

        If the `ModelSerializer` class *doesn't* generate the set of fields that
        you need you should either declare the extra/differing fields explicitly on
        the serializer class, or simply use a `Serializer` class.


        Included Mixins:

        * A mixin class to enable sparse fieldsets is included
        * A mixin class to enable validation of included resources is included
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        code:
          type: string
          maxLength: 150
        upfront_commission:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,4})?$
        high_trail_commission:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,4})?$
        low_trail_commission:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,4})?$
        is_active:
          type: boolean
        is_hidden:
          type: boolean
        balance_multiplier:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
      required:
      - code
      - high_trail_commission
      - id
      - low_trail_commission
      - name
      - upfront_commission
    PaginatedLenderList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page[number]=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Lender'
    PatchedLender:
      type: object
      description: |-
        A `ModelSerializer` is just a regular `Serializer`, except that:

        * A set of default fields are automatically populated.
        * A set of default validators are automatically populated.
        * Default `.create()` and `.update()` implementations are provided.

        The process of automatically determining a set of serializer fields
        based on the model fields is reasonably complex, but you almost certainly
        don't need to dig into the implementation.

        If the `ModelSerializer` class *doesn't* generate the set of fields that
        you need you should either declare the extra/differing fields explicitly on
        the serializer class, or simply use a `Serializer` class.


        Included Mixins:

        * A mixin class to enable sparse fieldsets is included
        * A mixin class to enable validation of included resources is included
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        code:
          type: string
          maxLength: 150
        upfront_commission:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,4})?$
        high_trail_commission:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,4})?$
        low_trail_commission:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,4})?$
        is_active:
          type: boolean
        is_hidden:
          type: boolean
        balance_multiplier:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
